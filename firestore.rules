rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures the /users/{userId} collection, ensuring only the authenticated user can manage their own profile.
     * @path /users/{userId}
     * @allow (create) User with ID matching auth UID can create their profile.
     * @allow (get, update, delete) User with ID matching auth UID can read, update, and delete their profile.
     * @deny (create) User cannot create a profile with an ID that doesn't match their auth UID.
     * @deny (update, delete) User cannot modify or delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Listing users is not permitted.

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Secures the /users/{userId}/contentIdeas/{contentIdeaId} collection, ensuring only the owner can manage their content ideas.
     * @path /users/{userId}/contentIdeas/{contentIdeaId}
     * @allow (create) User with ID matching parent path can create content ideas.
     * @allow (get, update, delete) User with ID matching parent path can read, update, and delete their content ideas.
     * @deny (create) User cannot create a content idea under another user's profile.
     * @deny (update, delete) User cannot modify or delete another user's content idea.
     * @principle Enforces document ownership and validates parent-child relationship.
     */
    match /users/{userId}/contentIdeas/{contentIdeaId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
      allow delete: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
    }

    /**
     * @description Secures the /users/{userId}/creators/{creatorId} collection, ensuring only the owner can manage their creator inspirations.
     * @path /users/{userId}/creators/{creatorId}
     * @allow (create) User with ID matching parent path can create creator inspirations.
     * @allow (get, update, delete) User with ID matching parent path can read, update, and delete their creator inspirations.
     * @deny (create) User cannot create a creator inspiration under another user's profile.
     * @deny (update, delete) User cannot modify or delete another user's creator inspiration.
     * @principle Enforces document ownership and validates parent-child relationship.
     */
    match /users/{userId}/creators/{creatorId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
      allow delete: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
    }

    /**
     * @description Secures the /users/{userId}/contentPlans/{contentPlanId} collection, ensuring only the owner can manage their content plans.
     * @path /users/{userId}/contentPlans/{contentPlanId}
     * @allow (create) User with ID matching parent path can create content plans.
     * @allow (get, update, delete) User with ID matching parent path can read, update, and delete their content plans.
     * @deny (create) User cannot create a content plan under another user's profile.
     * @deny (update, delete) User cannot modify or delete another user's content plan.
     * @principle Enforces document ownership and validates parent-child relationship.
     */
    match /users/{userId}/contentPlans/{contentPlanId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
      allow delete: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
    }

    /**
     * @description Secures the /users/{userId}/performanceMetrics/{performanceMetricId} collection, ensuring only the owner can manage their performance metrics.
     * @path /users/{userId}/performanceMetrics/{performanceMetricId}
     * @allow (create) User with ID matching parent path can create performance metrics.
     * @allow (get, update, delete) User with ID matching parent path can read, update, and delete their performance metrics.
     * @deny (create) User cannot create a performance metric under another user's profile.
     * @deny (update, delete) User cannot modify or delete another user's performance metric.
     * @principle Enforces document ownership and validates parent-child relationship.
     */
    match /users/{userId}/performanceMetrics/{performanceMetricId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
      allow delete: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
    }

    /**
     * @description Secures the /users/{userId}/tasks/{taskId} collection, ensuring only the owner can manage their tasks.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) User with ID matching parent path can create tasks.
     * @allow (get, update, delete) User with ID matching parent path can read, update, and delete their tasks.
     * @deny (create) User cannot create a task under another user's profile.
     * @deny (update, delete) User cannot modify or delete another user's task.
     * @principle Enforces document ownership and validates parent-child relationship.
     */
    match /users/{userId}/tasks/{taskId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
      allow delete: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
    }
  }
}