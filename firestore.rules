/**
 * @fileoverview Firestore Security Rules for SocialFlow application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for all data. Each user can only
 * access their own profile and the data nested under their user ID.  No listing of users is allowed.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, which includes profile information, content ideas, creators,
 * calendar events, performance metrics, and tasks.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied to protect user privacy.
 * - All data is private and user-specific. There are no public collections.
 *
 * Denormalization for Authorization:
 *  - The document ID for the /users/{userId} document MUST match the Firebase Auth UID.
 *  - Subcollection documents under /users/{userId} are implicitly owned by the user.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' can create their profile if userId == user_abc.
     * @allow (get) User with UID 'user_abc' can read their profile if userId == user_abc.
     * @allow (update) User with UID 'user_abc' can update their profile if userId == user_abc.
     * @allow (delete) User with UID 'user_abc' can delete their profile if userId == user_abc.
     * @deny (create) User with UID 'user_xyz' cannot create profile for userId == user_abc.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource != null && request.resource.data.id == resource.data.id;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to a user's content ideas.
     * @path /users/{userId}/contentIdeas/{contentIdeaId}
     * @allow (create) User with UID 'user_abc' can create a content idea under their profile.
     * @allow (get) User with UID 'user_abc' can read a content idea under their profile.
     * @allow (list) User with UID 'user_abc' can list content ideas under their profile.
     * @allow (update) User with UID 'user_abc' can update a content idea under their profile.
     * @allow (delete) User with UID 'user_abc' can delete a content idea under their profile.
     * @deny (create) User with UID 'user_xyz' cannot create a content idea under user_abc's profile.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/contentIdeas/{contentIdeaId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to a user's list of inspirational creators.
     * @path /users/{userId}/creators/{creatorId}
     * @allow (create) User with UID 'user_abc' can create a creator under their profile.
     * @allow (get) User with UID 'user_abc' can read a creator under their profile.
     * @allow (list) User with UID 'user_abc' can list creators under their profile.
     * @allow (update) User with UID 'user_abc' can update a creator under their profile.
     * @allow (delete) User with UID 'user_abc' can delete a creator under their profile.
     * @deny (create) User with UID 'user_xyz' cannot create a creator under user_abc's profile.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/creators/{creatorId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to a user's scheduled calendar events.
     * @path /users/{userId}/calendarEvents/{eventId}
     * @allow (create) User with UID 'user_abc' can create a calendar event under their profile.
     * @allow (get) User with UID 'user_abc' can read a calendar event under their profile.
     * @allow (list) User with UID 'user_abc' can list calendar events under their profile.
     * @allow (update) User with UID 'user_abc' can update a calendar event under their profile.
     * @allow (delete) User with UID 'user_abc' can delete a calendar event under their profile.
     * @deny (create) User with UID 'user_xyz' cannot create a calendar event under user_abc's profile.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/calendarEvents/{eventId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to a user's historical performance metrics.
     * @path /users/{userId}/performanceMetrics/{metricId}
     * @allow (create) User with UID 'user_abc' can create a performance metric under their profile.
     * @allow (get) User with UID 'user_abc' can read a performance metric under their profile.
     * @allow (list) User with UID 'user_abc' can list performance metrics under their profile.
     * @allow (update) User with UID 'user_abc' can update a performance metric under their profile.
     * @allow (delete) User with UID 'user_abc' can delete a performance metric under their profile.
     * @deny (create) User with UID 'user_xyz' cannot create a performance metric under user_abc's profile.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/performanceMetrics/{metricId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to a user's tasks.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) User with UID 'user_abc' can create a task under their profile.
     * @allow (get) User with UID 'user_abc' can read a task under their profile.
     * @allow (list) User with UID 'user_abc' can list tasks under their profile.
     * @allow (update) User with UID 'user_abc' can update a task under their profile.
     * @allow (delete) User with UID 'user_abc' can delete a task under their profile.
     * @deny (create) User with UID 'user_xyz' cannot create a task under user_abc's profile.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/tasks/{taskId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }
  }
}