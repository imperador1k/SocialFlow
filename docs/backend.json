{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the SocialFlow application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user."
        },
        "email": {
          "type": "string",
          "description": "User's email address.",
          "format": "email"
        },
        "username": {
          "type": "string",
          "description": "User's username."
        }
      },
      "required": [
        "id",
        "email",
        "username"
      ]
    },
    "ContentIdea": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ContentIdea",
      "type": "object",
      "description": "Represents a content idea for social media.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the content idea."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N ContentIdea)"
        },
        "contentType": {
          "type": "string",
          "description": "Type of content (Humor/Meme, Skill/Treino, Mindset/Rotina, YouTube)."
        },
        "description": {
          "type": "string",
          "description": "Description of the content idea."
        },
        "videoLinkInspiration": {
          "type": "string",
          "description": "Link to a video that inspires the content idea.",
          "format": "uri"
        },
        "status": {
          "type": "string",
          "description": "Status of the content idea (favorite, completed, not completed)."
        }
      },
      "required": [
        "id",
        "userId",
        "contentType",
        "description",
        "status"
      ]
    },
    "Creator": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Creator",
      "type": "object",
      "description": "Represents a creator for inspiration.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the creator."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Creator)"
        },
        "name": {
          "type": "string",
          "description": "Name of the creator."
        },
        "photoURL": {
          "type": "string",
          "description": "URL of the creator's photo.",
          "format": "uri"
        },
        "contentCategory": {
          "type": "string",
          "description": "Content category of the creator."
        },
        "socialMediaLinks": {
          "type": "array",
          "description": "Links to the creator's social media profiles.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "userId",
        "name",
        "contentCategory"
      ]
    },
    "ContentPlan": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ContentPlan",
      "type": "object",
      "description": "Represents a content plan for scheduling publications.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the content plan."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N ContentPlan)"
        },
        "contentIdeaId": {
          "type": "string",
          "description": "Reference to ContentIdea. (Relationship: ContentIdea 1:N ContentPlan)"
        },
        "scheduledTime": {
          "type": "string",
          "description": "Date and time for the content to be published.",
          "format": "date-time"
        },
        "platform": {
          "type": "string",
          "description": "Platform where the content will be published (e.g., Instagram, TikTok)."
        }
      },
      "required": [
        "id",
        "userId",
        "contentIdeaId",
        "scheduledTime",
        "platform"
      ]
    },
    "PerformanceMetric": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "PerformanceMetric",
      "type": "object",
      "description": "Represents performance metrics for social media content.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the performance metric entry."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N PerformanceMetric)"
        },
        "date": {
          "type": "string",
          "description": "The date for which the performance metrics are recorded.",
          "format": "date-time"
        },
        "platform": {
          "type": "string",
          "description": "Social media platform for the metrics (e.g., Instagram, TikTok)."
        },
        "followers": {
          "type": "number",
          "description": "Number of followers."
        },
        "likes": {
          "type": "number",
          "description": "Number of likes received."
        },
        "comments": {
          "type": "number",
          "description": "Number of comments received."
        },
        "shares": {
          "type": "number",
          "description": "Number of shares."
        }
      },
      "required": [
        "id",
        "userId",
        "date",
        "platform"
      ]
    },
    "Task": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Task",
      "type": "object",
      "description": "Represents a task related to social media activities.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the task."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Task)"
        },
        "description": {
          "type": "string",
          "description": "Description of the task."
        },
        "dueDate": {
          "type": "string",
          "description": "Due date for the task.",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "description": "Status of the task (e.g., To Do, In Progress, Completed)."
        }
      },
      "required": [
        "id",
        "userId",
        "description",
        "dueDate",
        "status"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profiles.  Path-based ownership enforced.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/contentIdeas/{contentIdeaId}",
        "definition": {
          "entityName": "ContentIdea",
          "schema": {
            "$ref": "#/backend/entities/ContentIdea"
          },
          "description": "Stores content ideas for a specific user. Path-based ownership enforced via the /users/{userId} parent.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "contentIdeaId",
              "description": "The unique identifier of the content idea."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/creators/{creatorId}",
        "definition": {
          "entityName": "Creator",
          "schema": {
            "$ref": "#/backend/entities/Creator"
          },
          "description": "Stores creator inspiration entries for a specific user.  Path-based ownership enforced via the /users/{userId} parent.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "creatorId",
              "description": "The unique identifier of the creator."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/contentPlans/{contentPlanId}",
        "definition": {
          "entityName": "ContentPlan",
          "schema": {
            "$ref": "#/backend/entities/ContentPlan"
          },
          "description": "Stores content plans for a specific user. Path-based ownership enforced via the /users/{userId} parent.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "contentPlanId",
              "description": "The unique identifier of the content plan."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/performanceMetrics/{performanceMetricId}",
        "definition": {
          "entityName": "PerformanceMetric",
          "schema": {
            "$ref": "#/backend/entities/PerformanceMetric"
          },
          "description": "Stores performance metrics for a specific user. Path-based ownership enforced via the /users/{userId} parent.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "performanceMetricId",
              "description": "The unique identifier of the performance metric entry."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/tasks/{taskId}",
        "definition": {
          "entityName": "Task",
          "schema": {
            "$ref": "#/backend/entities/Task"
          },
          "description": "Stores tasks for a specific user. Path-based ownership enforced via the /users/{userId} parent.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "taskId",
              "description": "The unique identifier of the task."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to ensure Authorization Independence, DBAC, and support secure list operations (QAPs). It leverages structural segregation and denormalization of authorization data.  All User-owned data is namespaced under the `/users/{userId}` collection.\n\nAuthorization Independence:\nUser ownership is enforced through path-based rules. Content Ideas, Creators, Content Plans, Performance Metrics, and Tasks are all stored as subcollections of the `/users/{userId}` collection, thereby inheriting the user's ownership. This design removes the need for `get()` calls in security rules to validate ownership.\n\nQAPs:\nSegregation of user-owned data into separate `/users/{userId}` subcollections simplifies list operations. Rules can securely filter data based on `request.auth.uid` without needing to filter based on data content.\n\nDBAC:\nAuthorization relies on `request.auth.uid` and does not require custom claims. The structure is organized around user ownership.\n\nInvariants:\nThe structure supports the integrity of ownership by enforcing path-based ownership for all user-related data. Timestamps can be added within the entities to track creation and modification times. Denormalization is not explicitly needed in this design since user ownership is enforced through path-based rules."
  }
}